*** 1variables1
Create a variable and assign it a value.

# Ruby uses the snake_case convention for variable names instead of the camelCase convention like other languages.
first_name = "Tyler"





*** 2interpolation1
Show how to use string interpolation and concatenation. 

# Strings can be in single or double quotes but note that interpolation will only work with double quotes. 

# String interpolation
name = "Tyler"
greeting = "Hello, #{name}, it is good to see you."

# String concatenation
new_name = "Bill"
new_greeting = "Hello, " + new_name + ", it is good to see you."





*** 3methods1
Create a method and then invoke it.

def say_hello
    puts "Hello!"
end

say_hello





*** 4methods2
Create a method that takes parameters and then invoke it. 

def greeting(name, time_of_day)
    puts "Hello #{name}, it is a beautiful #{time_of_day}."
end

greeting("Dan", "morning")





*** 5methods3
Create a method with default arguments and then invoke it once while supplying arguments and once without supplying any arguments. 

def programmer_greeting(name="friend", language="JavaScript")
    puts "Hello #{name}, I heard you are a great #{language} programmer."
end

programmer_greeting("Sarah", "Python")
programmer_greeting





*** 6printing1
Show how to print multiple items both on the same line and then printed out on separate lines. 

item1 = "First thing to print."
item2 = "Second thing to print."
item3 = "Third thing to print."

print item1
print item2
print item3

puts

puts item1
puts item2
puts item3





*** 7return1
Show what a method will return by default and what it will return when the 'return' keyword is used. 

def names
    person1 = "John"
    person2 = "Bill"
    person3 = "Jessica"
end

# A method will return the value of the last statement by default. This example will return person3 with a value of 'Jessica'.
puts names


def names2
    person1 = "John"
    return person2 = "Bill"
    person3 = "Jessica"
end

# The return keyword will interupt the execution of the method and return the value of that line. This example will return person2 with a value of 'Bill'.
puts names2





*** 8pry1
Show how to use the pry gem for debugging.

# After requiring the pry gem, you can add binding.pry in your code to stop the code execution and open a new REPL. You can look at the value of variables and update the values. Type 'exit' to close. 

require 'pry'

def pry_testing
    thing1 = "This is the first variable"
    thing2 = 7
    thing3 = "Washington"
    binding.pry
end

pry_testing





*** 9scope1
Create a method and declare some variables both inside and outside the method. Show how scope determines which variables can be accessed from different locations in the program. 

var1 = "Ted"
var2 = "Bill"

def scope_method
    var3 = "Dawn"
    var4 = "Jill"

    # var2 will not print because it was definied outside the method but is being called inside the method. 
    puts var2

    #var4 will print becuase it was defined inside a method and is being called inside the method. 
    puts var4
end

scope_method

# var1 will print becuase it was definied outside a method and is also being called outside a method.
puts var1 

# var3 will not print because it was defined inside a method but is being called outside that method.
puts var3 





*** 10truthy1
Show how to use the bang operator (!) to determine if something is truthy or falsey. 

# variable is assigned a string with a value of "hello". This is considered truthy. Using a single ! operator will return to oppsite of this which will be false. 
# Using the ! operator twice will take the opposite again and return true. 

# Note in Ruby only false and nil are considered falsey values. Everything else is truthy, even 0 and an empty string ''. 

variable = "hello"

puts variable
puts !variable
puts !!variable





*** 11boolean1
Show how to use the And and Or boolean operators. 

# For the And operator, both expressions must evaluate to true in order to return true.
puts true && true
puts true && false

# For the Or operator, only one expression must evaluate to true in order to return true. 
puts false || true
puts false || false





*** 12boolean1
Show how to use the comparison operators. 

puts "yellow" == "yellow"
puts "yellow" != "yellow"

puts 7 > 3
puts 7 < 3
puts 10 >= 10
puts 10 <= 10





*** 13conditional1
Write an if statement. 

dog = "tired"

if dog == "hungry"
    puts "Feed the dog."
elsif dog == "bored"
    puts "Walk the dog."
elsif dog == "tired"
    puts "Let the dog sleep."
else
    puts "The dog is fine."
end





*** 14conditional2
Write a case statement.

current_weather = "raining"

case current_weather
  when "sunny"
    puts "grab some sunscreen!"
  when "raining"
    puts "grab an umbrella"
  when "snowing"
    puts "bundle up"
end 





*** 15looping1
Write a loop that runs 10 times. Show how you can also do this without a counter using the times method. 

counter = 0

loop do 
    counter = counter + 1

    puts "The loop has run #{counter} times."

    if counter >= 10
        break
    end
end


# The times method must be called on an integer and will tell your loop to run a specific number of times. 
10.times do
    puts "Run this loop 10 times without a counter"
end





*** 16looping2
Write both a while loop and an until loop that runs 10 times. 

counter1 = 0
while counter1 < 10
    puts "This is the while loop"
    counter1 += 1
end


counter2 = 0
until counter2 == 10
    puts "This is the until loop"
    counter2 += 1
end





*** 17arrays1
Create an array of items. Show how to add new items both at the end of the array and at the beginning of the array. 

fruits = ["banana", "strawberry", "watermelon"]

# Both the shovel operator (<<) and the push method can be used to add items
# to the end of an array. 
fruits << "apple"
fruits.push("peach")

# The unshift method will add an item to the beginning of the array. 
fruits.unshift("grape")





*** 18arrays2
Create an array of items. Show how to remove items from both the end and the beginning of the array. 

fruits = ["peach", "apple", "banana", "strawberry", "watermelon"]

# The pop method will remove the last item from the array.
fruits.pop

# The shift method will remove the first item from the array. 
fruits.shift





*** 19arrays3
Create an array of items. Show how to access some of the different items in the array and how to look up the index of a specific item. 

fruits = ["peach", "apple", "banana", "strawberry", "watermelon"]

puts fruits[1]

# Putting a negative index number will start at the end of the array and work backwards. 
puts fruits[-2]

# The first and last methods can be used to find the first and last items in an array. 
puts fruits.first
puts fruits.last

# The index method will return the index number of the first item that matches the given argument. 
puts fruits.index("banana")





*** 20arrays4
Create an array of numbers. Show how to use methods to sort the array, reverse the array, show if a specific number is included in the array, and show the size of the array. 

numbers = [4, 8, 3, 5, 9]

# This will not modify the original array, use the sort! method instead if you want to modify the original. 
print numbers.sort
puts

# This will not modify the original array, use the reverse! method instead if you want to modify the original. 
print numbers.reverse
puts

puts numbers.include?(8)

puts numbers.size





*** 21iteration1
Show how to use the each method and the map/collect method to iterate through an array. 

# The each method will iterate through an array but note that the return value will always be the original array. 
primary_colors = ["Red", "Yellow", "Blue"]
updated_primary_colors = primary_colors.each do |color|
  puts "Primary Color #{color} is #{color.length} letters long."
end 
puts updated_primary_colors



# The map or collect method (they both do the same thing) will iterate through an array but it will modify the array. 
toppings = ["pickles", "mushrooms", "bacon"]
updated_toppings = toppings.map do |topping|
    "I love #{topping} on my burgers!"
end
puts updated_toppings





*** 22iteration2
Show how to use the all, none, any, and include boolean methods on an array. 

numbers = [1, 3, 4]

all_under_seven = numbers.all? do |number|
    number < 7
end
puts all_under_seven


none_equal_five = numbers.none? do |number|
    number == 5
end
puts none_equal_five


any_greater_than_four = numbers.any? do |number|
    number > 4
end
puts any_greater_than_four


puts numbers.include?(3)





*** 23iteration3
Show how to use the select, detect/find, and reject methods on an array. 

numbers = [1,2,3,4,5]

# The select method will return a new array with the elements that caused the block to return true. 
new_numbers1 = numbers.select do |number|
    number.even?
end
print new_numbers1
puts

# The detect or find method (they both do the same thing) will return the first element that makes the 
# block evaluate to true. 
new_numbers2 = numbers.find do |number|
    number > 3
end
print new_numbers2
puts

# The reject method will return a new array with the elements that caused the block to return false. 
new_numbers3 = numbers.reject do |number|
    number.even?
end
print new_numbers3
puts





*** 24hashes1
Create a hash using string keys, symbol keys, and using JSON style. Retrieve a value from each one. 

# Keys are strings
hash1 = {
    "item1" => "milk",
    "item2" => "bread",
    "item3" => "eggs"
}
puts hash1["item1"]

# Keys are symbols
hash2 = {
    :item1 => "milk",
    :item2 => "bread",
    :item3 => "eggs"
}
puts hash2[:item2]

# JSON style. Note the keys here are still symbols. 
hash3 = {
    item1: "milk",
    item2: "bread",
    item3: "eggs"
}
puts hash3[:item3]





*** 25hashes2
Create a hash and check if a specific key exists. Print one message if it does and another if it does not. 

list = {
    item1: "milk",
    item2: "eggs"
}

# If a hash key is not found, it will return nil which is falsey. 
if list[:item2]
    puts "Eggs are on the list."
else
    puts "Missing."
end





*** 26hashes3
Create a hash. Then update the value of one of the keys and also create a new key with a value. 

list = {
    item1: "milk",
    item2: "eggs"
}

list[:item2] = "cheese"

list[:item3] = "bread"





*** 27hashes4
Show that you can create and manipulate nested data structures. 

# Array of arrays
outer_array1 = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
# This will print 7
puts outer_array1[2][0]


# Array of hashes
outer_array2 = [
    {num1: 1, num2: 2, num3: 3},
    {num1: 4, num2: 5, num3: 6},
    {num1: 7, num2: 8, num3: 9}
]
# This will print 5
puts outer_array2[1][:num2]


# Hash of arrays
outer_hash1 = {
    array1: [1, 2, 3],
    array2: [4, 5, 6], 
    array3: [7, 8, 9]
}
# This will print out 6
puts outer_hash1[:array2][2]


# Hash of hashes
outer_hash2 = {
    hash1: {num1: 1, num2: 2, num3: 3},
    hash2: {num1: 4, num2: 5, num3: 6},
    hash3: {num1: 7, num2: 8, num3: 9}
}
# This will print out 2
puts outer_hash2[:hash1][:num2]





*** 28classes1
Create a class with an instance method. Create an instance of the class and call the method. 

# Class names start with a capital letter. If they are more than one word, they should use CamelCase 
# unlike variable names which should use snake_case in Ruby. 
class MyClass
    def say_hi
        puts "Hi there."
    end
end

item1 = MyClass.new
item1.say_hi





*** 29classes2
Create a class with a setter and getter method. Create an instance and use these methods to create and display an instance variable. 

# The @ symbol turns a local variable into an instance variable, meaning it becomes an attribute/property of that object. 
class Person

    # Note the '=' on the following line is just a character in the method name that identifies this method as a setter method. 
    def name=(name)
        @name = name
    end
  
    def name
        @name
    end
  
end 

kanye = Person.new

# The following line is syntactic sugar for using a setter method. The standard way to 
# do it would be like this: kanye.name=("Kanye")
kanye.name = "Kanye" 

puts kanye.name





*** 30classes3
Make a class with getter and setter methods created with attribute reader and writer macros. Then replace these with a single attribute accessor macro. 

# This class uses attribute reader and writer macros
class Person
    attr_reader :name, :age
    attr_writer :name, :age
end 

jim = Person.new
jim.name = "Jim"
jim.age = 23
puts "#{jim.name} is #{jim.age} years old."


# This class uses a single attribute accessor macro which combines the reader and writer macro functionality. 
class OtherPerson
    attr_accessor :name, :age
end

dan = OtherPerson.new
dan.name = "Dan"
dan.age = 30
puts "#{dan.name} is #{dan.age} years old."





*** 31classes4
Create a class with an initialize method and create an instance of the class. 

class Dog
    attr_reader :breed, :color
  
    def initialize(breed, color)
      @breed = breed
      @color = color
    end 
end

leo = Dog.new("ridgeback", "tan")





*** 32self1
Show how to use the self keyword.

# A Dog instance is only initiated with a name but an owner can be assigned later on with the 
# get_adopted method which uses the self keyword. 
class Dog
    attr_accessor :name, :owner
  
    def initialize(name)
      @name = name
    end
  
    def get_adopted(owner_name)
      self.owner = owner_name
    end
end

rover = Dog.new("Rover")
rover.get_adopted("Dan")
puts "#{rover.name} was adopted by #{rover.owner}."





*** 33classes1
Create a class with a class variable and class method.

class Album
    @@album_count = 0 
  
    def initialize
      @@album_count += 1
    end
  
    # The name of a class method starts with 'self.'
    def self.count
      @@album_count
    end
end

album1 = Album.new
album2 = Album.new
album3 = Album.new

puts Album.count





*** 34private1
Make a class with private methods.

# Private methods can't be called by an explicit receiver, like an instance of a class or the class itself. Private methods
# encapsulate functionality and other methods can depend on them. 
class Bartender
    def make_drink
        @ingredients = []
        choose_liquor
        choose_mixer
        puts "Here is your drink, it contains #{@ingredients}"
    end

    # The methods below the 'private' keyword are private. 
    private

    def choose_liquor
        @ingredients << "whiskey"
    end

    def choose_mixer
        @ingredients << "vermouth"
    end
end

dan = Bartender.new
dan.make_drink





*** 35advanced1
Create a class with a class variable and class method that can return a list of all instances that have been created. 

class Dog
    @@all = []
  
    attr_accessor :name
  
    def initialize(name)
      @name = name
      @@all << self
    end
  
    # Class methods start with 'self.'
    def self.all
      @@all
    end
end

dog1 = Dog.new("Leo")
dog2 = Dog.new("Max")
dog3 = Dog.new("Tiny")

# This will print a list of all Dog instances that have been created. 
puts Dog.all





*** 36advanced2
Create a class with a class variable and class method that can return a list of all instances that have been created. Then add a class method that can find a specific class instance by name. 

class Person
    attr_accessor :name
    @@all = []
  
    def initialize(name)
      @name = name
      @@all << self
    end
  
    def self.all
      @@all
    end
  
    def self.find_by_name(name)
      @@all.find{|person| person.name == name}
    end
end
  
Person.new("Grace Hopper")
Person.new("Sandi Metz")

grace = Person.find_by_name("Grace Hopper")
puts grace.name





*** 37advanced3
Create a class with a custom constructor method.

class Person
    @@all = []

    def self.all
        @@all
    end
  
    def self.create
      @@all << self.new
    end
end

person1 = Person.new
person2 = Person.new
person3 = Person.create
person4 = Person.create
person5 = Person.create

# Note that this will only display the Person objects created with the custom 'create' method. Those created with the standard Person.new method 
# will not be added to the @@all class variable. 
puts Person.all





*** 38relationships1
Create two classes that have a belongs to relationship. 

class Song
    attr_accessor :title, :artist
  
    def initialize(title)
      @title = title
    end 
end 

class Artist
    attr_accessor :name, :genre
  
    def initialize(name, genre) 
      @name = name
      @genre = genre
    end
end

drake = Artist.new("Drake", "rap")
hotline_bling = Song.new("Hotline Bling")

# The artist property of the Song object is being set to the Artist object. The Song object belongs to the Artist object. 
hotline_bling.artist = drake 





*** 39relationships2
Create two classes that have a has many/belongs to relationship. 

# An Artist has many Songs and a Song belongs to an Artist. Note that an individual Song keeps track of it's Artist. 
class Song
    attr_accessor :artist, :name, :genre
  
    @@all = []
  
    def initialize(name, genre)
      @name = name
      @genre = genre
      save
    end
  
    def save
      @@all << self
    end
  
    def self.all
      @@all
    end
end


class Artist
    attr_accessor :name
  
    def initialize(name)
      @name = name
    end
  
    def add_song(song)
      song.artist = self
    end
  
    def songs
      Song.all.select {|song| song.artist == self}
    end
end

led_zeppelin = Artist.new("Led Zeppelin")
jimi_hendrix = Artist.new("Jimi Hendrix")

kashmir = Song.new("Kashmir", "classic rock")
stairway = Song.new("Stairway to Heaven", "classic rock")
voodoo_child = Song.new("Voodoo Child", "classic rock")

led_zeppelin.add_song(kashmir)
led_zeppelin.add_song(stairway)
jimi_hendrix.add_song(voodoo_child)

p led_zeppelin.songs
p jimi_hendrix.songs





*** 40relationships3
Create three classes to show a has many through relationship. 

# Customers are connected to Waiters through the Meal class 

class Customer
    attr_accessor :name, :age
  
    @@all = []
  
    def initialize(name, age)
      @name = name
      @age = age
      @@all << self
    end

    def new_meal(waiter, total, tip=0)
        Meal.new(waiter, self, total, tip)
    end 

    def count_meals
        count = Meal.all.select do |meal|
            meal.customer == self
        end
        "#{self.name} ate #{count.length} meals."
    end
  
    def self.all
      @@all
    end
end


class Waiter
    attr_accessor :name, :yrs_experience
  
    @@all = []
  
    def initialize(name, yrs_experience)
      @name = name
      @yrs_experience = yrs_experience
      @@all << self
    end

    def new_meal(customer, total, tip=0)
        Meal.new(self, customer, total, tip)
    end
  
    def self.all
      @@all
    end
end


class Meal
    attr_accessor :waiter, :customer, :total, :tip
  
    @@all = []
  
    def initialize(waiter, customer, total, tip=0)
      @waiter = waiter
      @customer = customer
      @total = total
      @tip = tip
      @@all << self
    end
  
    def self.all
      @@all
    end
end 


sam = Customer.new("Sam", 27)
pat = Waiter.new("Pat", 2)
alex = Waiter.new("Alex", 5)

sam.new_meal(pat, 50, 10) # A Customer creates a Meal, passing in a Waiter instance
sam.new_meal(alex, 20, 3) # A Customer creates a Meal, passing in a Waiter instance
pat.new_meal(sam, 30, 5) # A Waiter creates a Meal, passing in a Customer instance 

puts sam.count_meals





*** 41inheritance1
Make a class that inherits from another.

class Vehicle
    attr_accessor :wheel_size, :wheel_number
  
    def initialize(wheel_size, wheel_number)
      @wheel_size = wheel_size
      @wheel_number = wheel_number
    end

    def honk
        puts "Honk! Honk!"
    end
  
    def go
      puts "Vehicle is going forward"
    end
end

# Note classes are typically added as separate files. If Car was in it's own file, you would need to add the following 
# line at the top: require_relative './vehicle'
class Car < Vehicle
    def go
        puts "Car is going forward"
    end
end

vehicle = Vehicle.new(20, 4)
car = Car.new(24, 4)

# Both Car and Vehicle have a go method. When called, it will look for the method on the child class and if it does not
# see it then it will look at the parent class for that method. 
vehicle.honk
vehicle.go
car.honk
car.go





*** 42modules1
Create a module with both instance methods and class methods that other classes can use. 

# If you want to use both instance and class methods inside a module, you can group the instance methods together in one module and the 
# class methods together in another module and then nest them inside a parent module. 
module Dance
    module InstanceMethods
        def twirl
            "I'm twirling!"
        end
        
        def pirouette
            "I'm doing a pirouette."
        end
    end

    module ClassMethods
        def metadata
            "This class produces objects that love to dance."
        end
    end
end

# If Kid was in it's own file, you would need to include the following line: require_relative './Dance'
class Kid
    # The include keyword will allow the instance methods to be used and the extend keyword will allow the class methods to be used.
    # The :: symbol allows you to use the methods inside the nested module. 
    include Dance::InstanceMethods 
    extend Dance::ClassMethods
  
    attr_accessor :name
  
    def initialize(name)
      @name = name
    end
end

# If Dancer was in it's own file, you would need to include the following line: require_relative './Dance'
class Dancer
    include Dance::InstanceMethods
    extend Dance::ClassMethods
  
    attr_accessor :name
  
    def initialize(name)
      @name = name
    end
end

kid1 = Kid.new("Sandy")
dancer1 = Dancer.new("Amanda")

puts kid1.twirl
puts Kid.metadata
puts dancer1.twirl
puts Dancer.metadata





*** 43super1
Show how to use the super keyword to add functionality to a method of a child class. 

class User
    attr_accessor :logged_in

    def log_in
      @logged_in = true
    end
end


class Student < User
    attr_accessor :logged_in, :in_class

    def log_in
        # The super keyword will use all the functionality of the log_in method from the parent class
        # and then add any extra functionality that is written below it. 
        super
        @in_class = true
    end
end

john = Student.new
john.log_in
puts john.logged_in
puts john.in_class





*** 44keywords1
Show how to use keyword arguments and also how to use them for mass assignment. 

# You can set default arguments with keywords if you want like this: (name: "Beyonce", current_age: 31)
def happy_birthday(name:, current_age:)
    puts "Happy Birthday, #{name}"
    current_age += 1
    puts "You are now #{current_age} years old"
end

# With keyword arguments you must but in a key and a value but the order of the arguments does not matter. We could put in name: "Carmelo Anthony"
# first and the method would still work properly. 
happy_birthday(current_age: 31, name: "Carmelo Anthony")


# Mass assignment lets you pass a hash as an argument with all the key/value pairs the method is expecting. 
class Person
    attr_accessor :name, :age
  
    def initialize(name:, age:)
      @name = name
      @age = age
    end
end

person_attributes = {name: "Sophie", age: 26}
sophie = Person.new(person_attributes)

p sophie





*** 45meta1
Show how to set up a class that can be initialized with an unkown number of attributes.

# This method means we do not need to know exactly how many attributes a User object will be created with. If we are pulling data
# from an API and using it to making objects, if we typically receive a hash with four key/value pairs, this technique will allow us to still 
# make objects if the API changes and now returns hashes with either more or less than four key/value pairs. 

class User
    def initialize(attributes)
        # Using the each method on a hash requires the key and the value, then does something for each one. 
        attributes.each do |key, value|
            # We will now have a setter and getter method for each key/value pair and the attributes will be correctly
            # set when an instance is created. 
            self.class.attr_accessor(key)
            self.send(("#{key}="), value)
        end
    end
end

twitter_user = {name: "Sophie", user_name: "sm_debenedetto", age: 26, location: "NY, NY"}

sophie = User.new(twitter_user)

p sophie
